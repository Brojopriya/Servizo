{"ast":null,"code":"const express = require('express');\nconst cors = require('cors');\nconst bodyParser = require('body-parser');\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst mysql = require('mysql2');\nconst app = express();\napp.use(cors());\napp.use(bodyParser.json());\n\n// Create a MySQL connection\nconst db = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: 'ARAFAT3453',\n  // Replace with your MySQL password\n  database: 'ServiceTechnicianFinder'\n});\n\n// JWT Secret Key (Use environment variables in production)\nconst SECRET_KEY = 'your_secret_key';\n\n// User Sign-Up route\napp.post('/signup', (req, res) => {\n  const {\n    user_name,\n    email,\n    password,\n    phone_number,\n    role\n  } = req.body;\n  if (!user_name || !email || !password || !role) {\n    return res.status(400).json({\n      success: false,\n      message: 'All fields are required'\n    });\n  }\n  bcrypt.hash(password, 10, (err, hashedPassword) => {\n    if (err) {\n      return res.status(500).json({\n        success: false,\n        message: 'Error during password hashing.'\n      });\n    }\n    const query = 'INSERT INTO User (user_name, email, password, phone_number, role) VALUES (?, ?, ?, ?, ?)';\n    db.query(query, [user_name, email, hashedPassword, phone_number, role], (err, results) => {\n      if (err) {\n        return res.status(500).json({\n          success: false,\n          message: 'Error during sign-up. Please try again.'\n        });\n      }\n\n      // Automatically create Technician row if role is technician\n      if (role === 'technician') {\n        const technicianQuery = 'INSERT INTO Technician (user_id, experienced_year) VALUES (?, ?)';\n        db.query(technicianQuery, [results.insertId, 0], techErr => {\n          if (techErr) {\n            console.error('Error creating technician record:', techErr);\n          }\n        });\n      }\n      res.json({\n        success: true,\n        message: 'User created successfully!'\n      });\n    });\n  });\n});\n\n// User Log-In route\napp.post('/login', (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n  if (!email || !password) {\n    return res.status(400).json({\n      success: false,\n      message: 'Email and password are required'\n    });\n  }\n  const query = 'SELECT * FROM User WHERE email = ?';\n  db.query(query, [email], (err, results) => {\n    if (err || results.length === 0) {\n      return res.status(400).json({\n        success: false,\n        message: 'Invalid email or password'\n      });\n    }\n    bcrypt.compare(password, results[0].password, (err, match) => {\n      if (err || !match) {\n        return res.status(400).json({\n          success: false,\n          message: 'Invalid email or password'\n        });\n      }\n\n      // Generate JWT token\n      const token = jwt.sign({\n        user_id: results[0].user_id,\n        role: results[0].role\n      }, SECRET_KEY, {\n        expiresIn: '1h'\n      });\n      res.json({\n        success: true,\n        message: 'Login successful!',\n        token: token\n      });\n    });\n  });\n});\n\n// Middleware to authenticate JWT\nconst authenticateJWT = (req, res, next) => {\n  var _req$header;\n  const token = (_req$header = req.header('Authorization')) === null || _req$header === void 0 ? void 0 : _req$header.split(' ')[1]; // Expect \"Bearer <token>\"\n\n  if (!token) {\n    return res.status(403).json({\n      success: false,\n      message: 'Access denied. No token provided.'\n    });\n  }\n  jwt.verify(token, SECRET_KEY, (err, user) => {\n    if (err) {\n      return res.status(403).json({\n        success: false,\n        message: 'Invalid token.'\n      });\n    }\n    req.user = user; // Attach user info to request\n    next();\n  });\n};\n\n// Update Technician Experience\napp.put('/update-experience', authenticateJWT, (req, res) => {\n  const {\n    experienced_year\n  } = req.body;\n  const userId = req.user.user_id;\n  const userRole = req.user.role;\n  console.log('Update Experience Request:', {\n    userId,\n    userRole,\n    experienced_year\n  });\n  if (userRole !== 'technician') {\n    return res.status(403).json({\n      success: false,\n      message: 'Access denied. Only technicians can update experience.'\n    });\n  }\n  if (!experienced_year || isNaN(experienced_year) || experienced_year < 0) {\n    return res.status(400).json({\n      success: false,\n      message: 'Valid experience year is required.'\n    });\n  }\n  const query = 'UPDATE Technician SET experienced_year = ? WHERE user_id = ?';\n  db.query(query, [parseInt(experienced_year, 10), userId], (err, results) => {\n    if (err) {\n      console.error('Error updating experience:', err);\n      return res.status(500).json({\n        success: false,\n        message: 'Database update failed.'\n      });\n    }\n    if (results.affectedRows === 0) {\n      console.log('Technician not found for user_id:', userId);\n      return res.status(404).json({\n        success: false,\n        message: 'Technician not found.'\n      });\n    }\n    res.json({\n      success: true,\n      message: 'Experience updated successfully.'\n    });\n  });\n});\n\n// Protected Route Example (Dashboard)\napp.get('/dashboard', authenticateJWT, (req, res) => {\n  res.json({\n    success: true,\n    message: `Welcome to the dashboard, user ${req.user.user_id}`,\n    role: req.user.role\n  });\n});\n\n// Server setup\nconst PORT = process.env.PORT || 8000;\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});","map":{"version":3,"names":["express","require","cors","bodyParser","bcrypt","jwt","mysql","app","use","json","db","createConnection","host","user","password","database","SECRET_KEY","post","req","res","user_name","email","phone_number","role","body","status","success","message","hash","err","hashedPassword","query","results","technicianQuery","insertId","techErr","console","error","length","compare","match","token","sign","user_id","expiresIn","authenticateJWT","next","_req$header","header","split","verify","put","experienced_year","userId","userRole","log","isNaN","parseInt","affectedRows","get","PORT","process","env","listen"],"sources":["/Users/arafatsheikh/D_Drive/programming/web_dev/service-technician-finder/frontend/src/App.js"],"sourcesContent":["const express = require('express');\nconst cors = require('cors');\nconst bodyParser = require('body-parser');\nconst bcrypt = require('bcryptjs');\nconst jwt = require('jsonwebtoken');\nconst mysql = require('mysql2');\n\nconst app = express();\napp.use(cors());\napp.use(bodyParser.json());\n\n// Create a MySQL connection\nconst db = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: 'ARAFAT3453', // Replace with your MySQL password\n  database: 'ServiceTechnicianFinder',\n});\n\n// JWT Secret Key (Use environment variables in production)\nconst SECRET_KEY = 'your_secret_key';\n\n// User Sign-Up route\napp.post('/signup', (req, res) => {\n  const { user_name, email, password, phone_number, role } = req.body;\n\n  if (!user_name || !email || !password || !role) {\n    return res.status(400).json({ success: false, message: 'All fields are required' });\n  }\n\n  bcrypt.hash(password, 10, (err, hashedPassword) => {\n    if (err) {\n      return res.status(500).json({ success: false, message: 'Error during password hashing.' });\n    }\n\n    const query = 'INSERT INTO User (user_name, email, password, phone_number, role) VALUES (?, ?, ?, ?, ?)';\n    db.query(query, [user_name, email, hashedPassword, phone_number, role], (err, results) => {\n      if (err) {\n        return res.status(500).json({ success: false, message: 'Error during sign-up. Please try again.' });\n      }\n\n      // Automatically create Technician row if role is technician\n      if (role === 'technician') {\n        const technicianQuery = 'INSERT INTO Technician (user_id, experienced_year) VALUES (?, ?)';\n        db.query(technicianQuery, [results.insertId, 0], (techErr) => {\n          if (techErr) {\n            console.error('Error creating technician record:', techErr);\n          }\n        });\n      }\n\n      res.json({ success: true, message: 'User created successfully!' });\n    });\n  });\n});\n\n// User Log-In route\napp.post('/login', (req, res) => {\n  const { email, password } = req.body;\n\n  if (!email || !password) {\n    return res.status(400).json({ success: false, message: 'Email and password are required' });\n  }\n\n  const query = 'SELECT * FROM User WHERE email = ?';\n  db.query(query, [email], (err, results) => {\n    if (err || results.length === 0) {\n      return res.status(400).json({ success: false, message: 'Invalid email or password' });\n    }\n\n    bcrypt.compare(password, results[0].password, (err, match) => {\n      if (err || !match) {\n        return res.status(400).json({ success: false, message: 'Invalid email or password' });\n      }\n\n      // Generate JWT token\n      const token = jwt.sign({ user_id: results[0].user_id, role: results[0].role }, SECRET_KEY, {\n        expiresIn: '1h',\n      });\n\n      res.json({\n        success: true,\n        message: 'Login successful!',\n        token: token,\n      });\n    });\n  });\n});\n\n// Middleware to authenticate JWT\nconst authenticateJWT = (req, res, next) => {\n  const token = req.header('Authorization')?.split(' ')[1]; // Expect \"Bearer <token>\"\n\n  if (!token) {\n    return res.status(403).json({ success: false, message: 'Access denied. No token provided.' });\n  }\n\n  jwt.verify(token, SECRET_KEY, (err, user) => {\n    if (err) {\n      return res.status(403).json({ success: false, message: 'Invalid token.' });\n    }\n\n    req.user = user; // Attach user info to request\n    next();\n  });\n};\n\n// Update Technician Experience\napp.put('/update-experience', authenticateJWT, (req, res) => {\n  const { experienced_year } = req.body;\n  const userId = req.user.user_id;\n  const userRole = req.user.role;\n\n  console.log('Update Experience Request:', { userId, userRole, experienced_year });\n\n  if (userRole !== 'technician') {\n    return res.status(403).json({ success: false, message: 'Access denied. Only technicians can update experience.' });\n  }\n\n  if (!experienced_year || isNaN(experienced_year) || experienced_year < 0) {\n    return res.status(400).json({ success: false, message: 'Valid experience year is required.' });\n  }\n\n  const query = 'UPDATE Technician SET experienced_year = ? WHERE user_id = ?';\n  db.query(query, [parseInt(experienced_year, 10), userId], (err, results) => {\n    if (err) {\n      console.error('Error updating experience:', err);\n      return res.status(500).json({ success: false, message: 'Database update failed.' });\n    }\n    if (results.affectedRows === 0) {\n      console.log('Technician not found for user_id:', userId);\n      return res.status(404).json({ success: false, message: 'Technician not found.' });\n    }\n    res.json({ success: true, message: 'Experience updated successfully.' });\n  });\n});\n\n// Protected Route Example (Dashboard)\napp.get('/dashboard', authenticateJWT, (req, res) => {\n  res.json({\n    success: true,\n    message: `Welcome to the dashboard, user ${req.user.user_id}`,\n    role: req.user.role,\n  });\n});\n\n// Server setup\nconst PORT = process.env.PORT || 8000;\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}